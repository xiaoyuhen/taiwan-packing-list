<config>
{
  "component": true
}
</config>
<style lang="postcss">
.Lists {
  position: relative;
  padding-bottom: 80px;
}

.Lists::after {
  content: ' ';
  width: 100vw;
  border-bottom: solid 1px #f0f2f7;
  position: absolute;
  bottom: 0;
  left: 0;
  display: block;
}

.Lists-title {
  font-size: 18px;
  padding: 12px 16px;
  position: relative;
}

.Lists-checkList {
  display: flex;
  align-items: center;
  position: relative;
  height: 54px;
}

.Lists-checkBoxWrapper {
  display: flex;
  align-items: center;
  padding: 0 16px;
  height: 54px;
}

.Lists-checkList::after,
.Lists-title::after {
  content: ' ';
  width: 100%;
  border-bottom: solid 1px #f0f2f7;
  position: absolute;
  bottom: 0;
  left: 0;
  display: block;
}

.Lists-checkBoxValue {
  margin-left: 12px;
  color: #1f1f1f;
  flex: auto;
  height: 54px;
  line-height: 54px;
}

.Lists-checkBoxSwiper {
  width: 100%;
  height: 54px;
}

.Lists-checkBoxWithDelete {
  background: #c2c2c2;
  height: 54px;
  display: flex;
  align-items: center;
  position: relative;
}

.Lists-checkBoxWithDeleteIcon {
  width: 24px;
  height: 24px;
  left: 40px;
  position: absolute;
  z-index: 999;
}

.Lists-checkBoxWithMask {
  background: #db3a29;
  position: absolute;
  z-index: 99;
  border-top-right-radius: 100%;
  border-bottom-right-radius: 100%;
  left: 0;
}

.Lists-checkBoxValueWithChecked {
  text-decoration: line-through;
  color: #9c9c9c;
}

.Lists-addList {
  position: fixed;
  bottom: 16px;
  right: 16px;
  width: 40px;
  height: 40px;
  border-radius: 100%;
  box-shadow: 0 1px 15px 0 rgba(0, 0, 0, 0.62);
}

.Lists-Editor {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  border-top: solid 1px #f0f2f7;
  background: #fff;
  overflow: hidden;
  white-space: nowrap;
}

.Lists-EditorContent {
  display: flex;
  align-items: center;
  height: 40px;
  padding: 0 16px;
  width: 100%;
}

.Lists-EditorContentSendButton {
  widht: 20px;
  height: 20px;
  flex: 1;
  margin-right: 16px;
}

.Lists-EditorContentCheckbox {
  width: 25px;
  height: 25px;
  border-radius: 5px;
  border: 1px solid #f0f2f7;
  min-width: 25px;
}

.Lists-EditorContentInput {
  flex: auto;
  margin-left: 12px;
  min-width: 200px;
}

.Lists-EditorTitleList {
  display: flex;
  align-items: center;
  height: 50px;
  padding-top: 6px;
  padding-left: 16px;
}

.Lists-EditorTitle {
  margin-right: 12px;
  background: #ededed;
  height: 30px;
  width: auto;
  border-radius: 15px;
  color: #33373e;
  padding: 2px 12px;
  line-height: 30px;
  display: inline-block
}

.Lists-EditorTitleWithChoose {
  background: #4990EE;
  color: #fff;
}
</style>

<template>
  <bolck>
    <view wx:for="{{listData}}" wx:for-item="lists" class="Lists" wx:key="{{lists.title}}">
      <view class="Lists-title" wx:if="{{lists.lists.length > 0}}">{{lists.name}}</view>
      <checkbox-group
        bindchange="checkboxChange"
        data-value="{{item.name}}"
        data-title="{{lists.title}}"
        wx:for="{{lists.lists}}"
        wx:for-item="item"
        wx:key="{{index}}"
        class="Lists-checkList"
      >
        <swiper
          class="Lists-checkBoxSwiper"
          bindtransition="bindtransition"
          bindchange="bindchange"
          data-value="{{item.name}}"
          data-title="{{lists.title}}"
          current="{{current}}"
          duration="{{duration}}"
        >
          <swiper-item>
            <view class="Lists-checkBoxWrapper">
              <checkbox value="{{item.name}}" checked="{{item.checked}}" class="Lists-checkBox" />
              <view
                class="{{item.checked ? 'Lists-checkBoxValueWithChecked Lists-checkBoxValue' : 'Lists-checkBoxValue'}}"
                data-id="{{item.id}}"
                data-title="{{lists.title}}"
                bindtap="handleNavigateTo"
              >{{item.name}}</view>
            </view>
          </swiper-item>
          <swiper-item>
            <view class="Lists-checkBoxWithDelete">
              <view class="Lists-checkBoxWithMask" wx:if="{{showMask}}" style="width:{{maskWidth}};height:{{maskHeight}}" />
              <image src="../assets/delete.svg" class="Lists-checkBoxWithDeleteIcon" />
            </view>
          </swiper-item>
        </swiper>
      </checkbox-group>
    </view>
    <image
      src="../assets/add.svg"
      class="Lists-addList"
      wx:if="{{showAddButton}}"
      bindtap="handleAddList"
    />
    <view class="Lists-Editor" wx:if="{{!showAddButton}}">
      <view class="Lists-EditorContent">
        <view class="Lists-EditorContentCheckbox"></view>
        <input class="Lists-EditorContentInput" placeholder="添加清单" confirm-type="done" bindinput="bindKeyInput" />
        <image src="../assets/send.svg" class="Lists-EditorContentSendButton" bindtap="handleSend" />
      </view>
      <scroll-view scroll-x style="width: calc(100% - 16px); white-space: nowrap; display: flex" class="Lists-EditorTitleList" enable-flex>
        <view
          wx:for="{{listData}}"
          class="{{title === item.title ? 'Lists-EditorTitle Lists-EditorTitleWithChoose' : 'Lists-EditorTitle'}}"
          data-title="{{item.title}}"
          bindtap="handleSelect"
        >{{item.name}}</view>
      </scroll-view>
    </view>
  </bolck>
</template>

<script>
import LIST_DATA from '../constant'

Component({
  data: {
    listData: [],
    showMask: false,
    maskHeight: '',
    current: 0,
    maskWidth: '',
    duration: 500,
    showAddButton: true,
    title: 'documents',
    inputValue: '',
    totalNumber: 55,
  },
  pageLifetimes: {
    show: function() {
      const checkList = wx.getStorageSync('taiwan_checkList')
      let listData = []

      if (!checkList) {
        listData = LIST_DATA
      } else {
        listData = JSON.parse(checkList)
      }
      this.setData({
        listData,
      })
    }
  },
  methods: {
    checkboxChange: function(e) {
      const {value, title} = e.target.dataset

      this.handleCheckBoxChange(value, title)
    },

    handleCheckBoxChange: function(value, title) {
      const {listData} = this.data

      const newListData = listData.map(item => {
        if (item.title === title) {
          const newlists = item.lists.map(list => {
            if (list.name === value) {
              return {
                ...list,
                checked: !list.checked,
              }
            }

            return list
          })

          return {
            ...item,
            lists: newlists,
          }
        }

        return item
      })

      this.setData({
        listData: newListData
      })

      wx.setStorageSync('taiwan_checkList', JSON.stringify(newListData))
    },

    // TODO: throttle
    bindtransition: function(e) {
      const {dx} = e.detail
      const width = wx.getSystemInfoSync().windowWidth
      const scalc = dx / width

      // 滑动超过 40% 展示红色动画
      if (scalc >= 0.4) {
        this.setData({
          showMask: true,
          maskWidth: `${dx * (scalc ** scalc)}px`,
          maskHeight: `${dx * (scalc ** scalc)}px`,
        })
      } else {
        this.setData({
          showMask: false,
          maskWidth: '',
          maskHeight: '',
        })
      }
    },

    bindchange: function(e) {
      const {listData} = this.data
      const {value, title} = e.target.dataset
      const {source} = e.detail

      if (source === 'touch') {
        const newListData = listData.map(item => {
          if (item.title === title) {
            const newlists = item.lists.filter(list => list.name !== value)

            return {
              ...item,
              lists: newlists,
            }
          }

          return item
        })

        // 这里把 duration 设置为 0，避免删除时的动画冲突
        this.setData({
          duration: 0,
        })

        // 500ms 后再进行删除操作，等待动画完成
        const timer = setTimeout(() => {
          this.setData({
            listData: newListData,
            hasDeleteData: false,
            current: 0,
            duration: 500,
          }, () => clearTimeout(timer))
        }, 500);

        wx.setStorageSync('taiwan_checkList', JSON.stringify(newListData))
      }
    },

    handleNavigateTo: function(e) {
      const {id, title} = e.target.dataset

      wx.navigateTo({
        url: `/pages/detail?id=${id}&title=${title}`
      })
    },

    handleAddList: function() {
      this.setData({
        showAddButton: false,
      })
    },

    handleShowAddButton: function() {
      this.setData({
        showAddButton: true,
      })
    },

    handleSelect: function(e) {
      const {title} = e.target.dataset

      this.setData({title})
    },

    handleSend: function() {
      const {listData, title, inputValue, totalNumber} = this.data

      listData.forEach(item => {
        if (item.title === title) {
          item.lists.push({
            name: inputValue,
            id: totalNumber + 1,
            totalNumber: totalNumber + 1,
            checked: false,
          })
        }
      })

      this.setData({
        listData,
      })

      wx.setStorageSync('taiwan_checkList', JSON.stringify(listData))

      this.handleShowAddButton()
    },

    bindKeyInput: function(e) {
      this.setData({
        inputValue: e.detail.value
      })
    }
  }
})
</script>
